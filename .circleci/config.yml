version: 2

workflows:
  version: 2
  Build_Test_Deploy:
    jobs:
      - Static Analysis
      - Build
      - Test:
          requires:
            - Build
      - Deploy Trigger:
          type: approval
          requires:
            - Static Analysis
            - Test
          filters:
            tags:
              only: /.*/
      - Deploy:
          requires:
            - Deploy Trigger

jobs:
  Static Analysis:
    docker:
      - image: circleci/openjdk:11-jdk

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: gradle ktlintCheck
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}

  Build:
    docker:
      - image: circleci/openjdk:11-jdk

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Load dependencies
          command: gradle dependencies

      - save_cache:
          name: Execute build script
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}

      - run:
          name: Build Jar
          command: gradle bootJar

  Test:
    docker:
      - image: circleci/openjdk:11-jdk

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Run tests
          command: gradle test

  Deploy:
    docker:
      - image: circleci/openjdk:11-jdk

    steps:
      - checkout

      - run:
          name: Setup Heroku
          command:
            wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh

      - run:
          name: Deploy to host
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git ${CIRCLE_BRANCH}:main
